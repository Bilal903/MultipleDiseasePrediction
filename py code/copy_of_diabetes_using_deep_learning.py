# -*- coding: utf-8 -*-
"""Copy of Diabetes using Deep learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r3bTE_rKRXkgPE-BPVvCLrru5fqG2qkU
"""

!pip install tensorflow

import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import to_categorical

diabetes = pd.read_csv("/content/diabetes_prediction_dataset.csv")
diabetes.head()

diabetes.shape

diabetes.info()

diabetes.isna().sum()



diabetes["diabetes"].value_counts()



diabetes_new = diabetes.drop(["diabetes", "smoking_history", "gender"], axis = 1)

diabetes_new = diabetes_new.values

diabetes_new

scale = StandardScaler()

diabetes_new_scale = scale.fit_transform(diabetes_new)

diabetes_new_scale

type(diabetes_new_scale)

outcome = diabetes["diabetes"]
outcome

outcome_enc = tf.keras.utils.to_categorical(outcome)
print(outcome_enc)
print("=========")
print(outcome_enc.shape)

x_train, x_test, y_train, y_test = train_test_split(diabetes_new_scale, outcome_enc, test_size = 0.2, random_state = 10)

print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dropout,Dense

model = Sequential()
model.add(Dense(64, input_shape=(6,)))
model.add(Dense(16))
model.add(Dropout(0.2))
model.add(Dense(8, activation="relu"))
model.add(Dense(2, activation="softmax"))

model.compile(optimizer = "rmsprop",
             loss = "binary_crossentropy",
             metrics = ["accuracy"])

history = model.fit(x_train, y_train, epochs = 50, batch_size = 10 ,validation_split = 0.1, verbose = 2)

evaluation = model.evaluate(x_test, y_test, verbose = 0)

print("\t Test Loss: ", evaluation[0])
print("\t Test Accuracy: ", evaluation[1])

pred = model.predict(x_test)[2]
pred

y_test[2]



"""**Saving the trained model:**"""

import pickle

DD = 'diabetes_detec_model.sav'
pickle.dump(model, open(DD, 'wb'))

#loading the saved model
loaded_model = pickle.load(open('diabetes_detec_model.sav', 'rb'))

evaluation = model.evaluate(x_test, y_test, verbose = 0)

print("\t Test Loss: ", evaluation[0])
print("\t Test Accuracy: ", evaluation[1])