# -*- coding: utf-8 -*-
"""Heart_disease_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bT-n0dmkASgt4CQUC57sJl04YyJo03jz
"""

#importing lib
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#importing the data
heart_disease_data=pd.read_csv("/content/cardio_train.csv")
heart_disease_data

"""# **DATA CLEANING:**"""

#data info
heart_disease_data.info()

heart_disease_data.isnull().sum()

#checking trend of each column to add values
import matplotlib.pyplot as plt
import seaborn as sns

# fig, ax = plt.subplots(figsize=(8,8))
# sns.distplot(heart_disease_data)
X = heart_disease_data
plt.plot(X, 'ro')
plt.show()

# #using imputation to add missing values
# #totchol, BMI, glucose, heartRate

# heart_disease_data['totChol'].fillna(1, inplace=True)
# heart_disease_data['BMI'].fillna(1, inplace=True)
# heart_disease_data['glucose'].fillna(1, inplace=True)
# heart_disease_data['heartRate'].fillna(1, inplace=True)
# heart_disease_data['BPMeds'].fillna(1, inplace=True)

# #dropping unnecessary column
# heart_disease_data = heart_disease_data.drop('education', axis=1)
# heart_disease_data = heart_disease_data.drop('cigsPerDay', axis=1)

#checking the distribution for tenyearchd
heart_disease_data['cardio'].value_counts()

heart_disease_data

"""# **Splitting The features and Target(TenYearCHD):**"""

X= heart_disease_data.drop(columns='cardio', axis=1)
Y= heart_disease_data['cardio']

#spliting data into training And Testing
#stratify split the data in similar proportional of 0 and 1
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size= 0.2, stratify= Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""# **MODEL TRAINING USING LOGISTIC REGRESSION**"""

model = LogisticRegression()

#applying the model on training data
model.fit(X_train, Y_train)
# print(X_train.head())

"""# **Model Evaluation**"""

#checking the accuracy on the training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score is: ', training_data_accuracy)

#checking the accuracy on the test data
X_test_prediction = model.predict(X_test)
training_data_accuracy = accuracy_score(X_test_prediction, Y_test)
print('Accuracy score is: ', training_data_accuracy)

"""# **BUILDING PREDICTIVE SYSTEM**"""

input_data = (1,20228,1,156,85,140,90,3,1,0,0,1)

#changeing the input data to numpy to reshape the above values
input_data_as_numpy = np.asarray(input_data)

#reshaping the numpy array to predict for the given input
input_data_reshape = input_data_as_numpy.reshape(1, -1)

prediction = model.predict(input_data_reshape)

print(prediction)

if (prediction[0] == 0):
  print('The person does not have Heart Disease')
else:
   print('The person have Heart Disease')

"""# **Saving the trained model:**"""

import pickle

HD = 'heart_disease_model.sav'
pickle.dump(model, open(HD, 'wb'))

#loading the saved model
loaded_model = pickle.load(open('heart_disease_model.sav', 'rb'))

input_data = (1,20228,1,156,85,140,90,3,1,0,0,1)

#changeing the input data to numpy to reshape the above values
input_data_as_numpy = np.asarray(input_data)

#reshaping the numpy array to predict for the given input
input_data_reshape = input_data_as_numpy.reshape(1, -1)

prediction = model.predict(input_data_reshape)

print(prediction)

if (prediction[0] == 0):
  print('The person does not have Heart Disease')
else:
   print('The person have Heart Disease')